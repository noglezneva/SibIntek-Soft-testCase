Задание 1. Ответьте на вопросы:
1.1. Что такое goroutine в Go и как она отличается от традиционного потока?
1.2. Что такое каналы в Go? Что будет возвращено при чтении из закрытого канала?
1.3. Как в Go реализовать взаимное исключение при доступе к общим ресурсам?
1.4. Что такое ананимная функция в Go?
1.5. Как в Go обрабатывать паники и ошибки?
1.6. Существует ли концепция наследования в Go?
1.7. Что такое интерфейсы в Go?
1.8. Что такое "грязное чтение" (dirty read) в контексте баз данных?

Задание 2. Напишите программу.
Напишите консольную программу на Go, которая выполняет следующие действия:

1. Читает из файла JSON с массивом чисел.
2. Считает сумму всех чисел в массиве.
3. Выполняет HTTP GET запрос на заданный URL и проверяет статус ответа (должен быть 200).
4. Логирует результаты каждого шага в файл.

Важные детали:

- Если во время выполнения программы возникает ошибка, программа должна её корректно обработать и залогировать.
- Логи должны содержать динамичные данные там, где это возможно (url, статус, текст ошибки и т.д.).
- Формат и структура JSON-файла должны быть описаны в документации к программе.
- Программа должна быть оформлена с соблюдением принципов чистого кода и хороших практик Go.

Задание 3. Доработайте программу.
Модифицируйте программу из задания 2 таким образом, чтобы она могла:

1. Читать данные не только из файла, но и из стандартного ввода.
2. Принимать через аргументы командной строки параметр для определения источника данных (файл или stdin).
3. Сохранять результат работы в указанный пользователем файл, а не только в стандартный вывод.
4. Поддерживать конфигурацию через файл настроек или переменные окружения (например, URL для HTTP запроса).
5. Результаты заданий следует представить в текстовом виде (не в виде ссылок).